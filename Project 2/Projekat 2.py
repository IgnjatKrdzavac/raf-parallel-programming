# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XxCn9bx1BPvSZQZxD8BB44vGnUmuZtOw
"""

pip install wikipedia

"""**Stavke 1.1, 1.2 i 1.3**

```

```


"""

import wikipedia
from functools import reduce
import operator

wikipedia.set_lang("sr")
pocetni_niz = ['Beograd', 'Prvi svetski rat', 'Protein', 'Mikroprocesor', 'Stefan Nemanja', 'Košarka']

brojac_skracivanja = 0
flag1 = 1




 
def get_texts(value, results = 10):
    texts = []
    
    '''Dohvata naslove zahtevanog broja stranica koje se pojavaljuju kao 
    rezultati pretrage za zadatu kljucnu rec'''
    titles = wikipedia.search(value, results=results)
    
    
    for title in titles:
        
        
        try:
            page = wikipedia.page(title)
            text = page.content
        
            texts = texts + [(value, text)]

        
        except wikipedia.exceptions.DisambiguationError as e:
            print (e.options)
        except wikipedia.exceptions.PageError as e:
            print (e)

       
    return texts 


lista_listi = list(map(get_texts,pocetni_niz))
print(lista_listi)

"""**Stavka 1.4**

```

```


"""

import operator

lista_tuplova = reduce(operator.iconcat, lista_listi, [])
print(lista_tuplova)

"""**Stavke 2.1, 2.2, 2.3, 2.4, 2.5**"""

def pretprocesiranje_teksta(keyval):
    key, value = keyval
    global brojac_skracivanja
    global flag1
    brojac_skracivanja = 0
    flag1 = 1

    tekst1 = (map(lambda x: x.lower(), value))
    lower = list(tekst1)
     
   
    lower_bez_karaktera = reduce(ukloni_specijalne_karaktere,lower,[]) 
    lista_sa_granicnikom = reduce(dodaj_granicnik,lower_bez_karaktera,[])
    skracena_lista = reduce(skrati_listu,lista_sa_granicnikom,[])


    return (key,skracena_lista)



def dodaj_granicnik(array,element):
    disallowed_characters =[' ','\n','\t']


    
    element = element.replace(' ', '$')
    

    if not array:
        if(element != '\n' and element != '\t'):
            return [element]
        else:
            return array    
    else:
        if(element != '\n' and element != '\t'):
            return array + [element]
        else:
            return array    



def ukloni_specijalne_karaktere(array,element):
    #'=', '-', ',', '!', '?', '.', '$', '(', ')', '[', ']'
    disallowed_characters =['=','.', '_','!','>','<', '?','$', ' " ','"','-', '(', ')', '[', ']',"'"
    ,"''",'„','”',',',':','&','+','/','%',';','\\','^','{','}','»','²','⇌','…','−'] 
    #"._!=-,<>?$()[]"

    #for character in disallowed_characters:
	    #element = element.replace(character, "")
    if not element in disallowed_characters:
        if not array:
            return [element]
        else:
            return array + [element] 
    else:
        return array



def skrati_listu(array,element):
    global brojac_skracivanja
    global flag1

    
    while(brojac_skracivanja < 10000):
        brojac_skracivanja += 1
        if not array:
            return [element]
        else:
            return array + [element]  

    if(element != '$' and flag1 == 1):
        flag1 = 0
        return array + [element]
    return array

spremljena_lista = (list(map(pretprocesiranje_teksta,lista_tuplova)))
print(spremljena_lista)

"""**Stavka 3.1**"""

brojac_tekstova = -1


def spajanje_u_jednu_listu(array,keyval):
    global brojac_tekstova
    key, value = keyval

    brojac_tekstova += 1
    
    if((brojac_tekstova % 10) < 5):
        
        
        if not array:
            return value
        else:
            return array + value

    else:
        
        return array


spojena_lista = reduce(spajanje_u_jednu_listu,spremljena_lista,[])
print(spojena_lista)

"""**Stavka 3.2**"""

par = []
tmp = []
brojac_konkatenacije = 0

def konkatenacija_karaktera(array,karakter):
    global brojac_konkatenacije
    global par  
    global tmp 
    
    
    par = par + [karakter]
    if(brojac_konkatenacije == 1):
        

        tmp.clear()
        tmp += par
        par.clear()
        par += tmp[-1]
        if(tmp[0] == '$'):
            return array
        tmp[0 : 2] = [''.join(tmp[0 : 2])]
        
        return array + tmp

    
    brojac_konkatenacije +=1
    if not array:
        
        return []


lista_kandidata = reduce(konkatenacija_karaktera,spojena_lista,[])
print(lista_kandidata)

"""**Stavka 3.3**"""

def mapiranje_tokena(value):
    return value,1

def key_add(array, value):
    if array and array[-1][0] == value[0]:
        array[-1] = array[-1][0], array[-1][1] + value[1]
    else:
        array.append(value)
    return array



    
token_vrednost = (list(map(mapiranje_tokena,lista_kandidata)))
token_pojavljivanja = sorted(token_vrednost, key=lambda x: x[0])
token_sabrano = reduce(key_add, token_pojavljivanja, [])
pojavljivanja_sort = sorted(token_sabrano, key=lambda x: x[1],reverse=True)




print(pojavljivanja_sort)

index = 0
duzina_reci = 0


def ubacivanje_najcesceg_tokena(array,karakter):
    global najcesci_token               
    global index
    global duzina_reci
    #print(f'indeks:{index}, karakter :{karakter}, najcesci_token:{najcesci_token}')
    if(karakter == najcesci_token[index]):
        duzina_reci +=1
        index +=1

        if(duzina_reci == len(najcesci_token)):
            index = 0
            duzina_reci = 0
            return array + [najcesci_token]

        else:
            if not array:
                return []
            else:
            	return array 

    else:
        index = 0
        duzina_reci = 0

        if not array:
            return [karakter]
        else:
            return array + [karakter]
    
        
        
        



najcesci_token = pojavljivanja_sort[0][0]
spojena_lista = reduce(ubacivanje_najcesceg_tokena,spojena_lista,[])
print(spojena_lista)